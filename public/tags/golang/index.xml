<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on İlker Korkut</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>Recent content in Golang on İlker Korkut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright> </copyright>
    <lastBuildDate>Wed, 26 Jun 2024 16:08:33 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>All-in-One Solution for observability in Go Microservices using Prometheus, Loki, Promtail, Grafana and Tempo</title>
      <link>http://localhost:1313/posts/golang-all-in-one-microservice-observability/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/golang-all-in-one-microservice-observability/</guid>
      <description>In this post, I will try to demonstrate how to build a complete observability solution for a go microservice with Prometheus, Loki, Promtail, Tempo and interacting with the Grafana dashboard. In API layer, I will use Fiber framework for building a simple service. If you are in a hurry, you can find the source code in this section.&#xA;Prerequisites:&#xA;Go 1.22 Docker (and docker-compose) While gathering logs, I also create a kafka sink to consuming logs on promtail for loki.</description>
    </item>
    <item>
      <title>Efficiently Finding PIDs by Binary Name in Linux Using Go</title>
      <link>http://localhost:1313/posts/golang-find-pid-with-name/</link>
      <pubDate>Wed, 06 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/golang-find-pid-with-name/</guid>
      <description>For many system functions, managing processes and finding their Process IDs (PIDs) is essential. However, it can occasionally be difficult to retrieve PIDs based on the binary name, particularly if the names are lengthy or are not presented correctly when using tools like (process status) ps. We will now examine a Go function that effectively locates Linux OS process IDs using their binary names.&#xA;Issue: Finding Processes Using Binary Names It is necessary to be able to identify individual processes using their binary names while working with a heterogeneous group of processes on a Linux system.</description>
    </item>
    <item>
      <title>Linux&#39;ta Go Kullanarak Binary İsimi ile PID&#39;lerin Etkin Bir Şekilde Bulunması</title>
      <link>http://localhost:1313/posts/tr/golang-find-pid-with-name-tr/</link>
      <pubDate>Wed, 06 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/tr/golang-find-pid-with-name-tr/</guid>
      <description>Birçok sistem işlevi için, Go uygulaması üzerinden execute edilen process&amp;rsquo;leri yönetmek ve bunların İşlem Kimliklerini (PIDs) bulmak önemlidir. Ancak, özellikle isimler uzunsa veya (işlem durumu) ps gibi araçları kullanırken doğru şekilde görüntelenemediğinde PID&amp;rsquo;leri almak zor olabilmektedir.&#xA;Sorun: Binary İsimleri Kullanarak Process&amp;rsquo;leri Bulabilmek Linux sisteminde heterojen bir process grubuyla çalışırken, process&amp;rsquo;lerin binary isimleri kullanarak tanımlayabilmek önemlidir. Linux sistemleri, process adını belli bir genişlikteki bir process listeleme alanına sığdırmak için otomatik olarak kısaltır.</description>
    </item>
  </channel>
</rss>
